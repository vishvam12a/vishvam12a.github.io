---
const navItems = [
  { name: 'Home', url: '/' },
  { name: 'About', url: '/#about' },
  { name: 'Experience', url: '/#experience' },
  { name: 'Projects', url: '/#projects' },
  { name: 'Contact', url: '/#contact' },
];
---

<header class="fixed w-full bg-white/80 dark:bg-gray-900/80 backdrop-blur-md z-50 shadow-sm">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-16 md:h-20">
      <div class="flex items-center">
        <a href="/" class="flex items-center">
          <span class="text-lg md:text-xl font-bold tracking-tighter text-primary-600 dark:text-primary-400">VJ</span>
          <span class="ml-2 text-lg font-medium text-gray-900 dark:text-white">Vishvam J. Joshi</span>
        </a>
      </div>
      
      <!-- Desktop Nav -->
      <nav class="hidden md:flex items-center space-x-8">
        {navItems.map(item => (
          <a 
            href={item.url} 
            class="text-sm font-medium text-gray-700 hover:text-primary-600 dark:text-gray-300 dark:hover:text-primary-400 transition-colors"
          >
            {item.name}
          </a>
        ))}
        
        <button 
          id="theme-toggle" 
          type="button" 
          class="text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none rounded-lg text-sm p-2 transition-colors"
          aria-label="Toggle dark mode"
        >
          <svg id="theme-toggle-dark-icon" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
          </svg>
          <svg id="theme-toggle-light-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"></path>
          </svg>
        </button>
      </nav>
      
      <!-- Mobile menu button -->
      <div class="flex md:hidden items-center">
        <button id="mobile-menu-button" class="text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 p-2 rounded-md">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
  
  <!-- Mobile Menu -->
  <div id="mobile-menu" class="hidden md:hidden bg-white dark:bg-gray-900 shadow-md">
    <div class="px-2 pt-2 pb-3 space-y-1">
      {navItems.map(item => (
        <a 
          href={item.url} 
          class="block px-3 py-2 text-base font-medium text-gray-700 hover:text-primary-600 dark:text-gray-300 dark:hover:text-primary-400 transition-colors"
        >
          {item.name}
        </a>
      ))}
      
      <button 
        id="mobile-theme-toggle" 
        type="button" 
        class="w-full text-left px-3 py-2 text-base font-medium text-gray-700 hover:text-primary-600 dark:text-gray-300 dark:hover:text-primary-400 transition-colors"
      >
        <span id="mobile-theme-text">Toggle Dark Mode</span>
      </button>
    </div>
  </div>
</header>

<script>
  function initTheme() {
    const isDark = document.documentElement.classList.contains('dark');
    const darkIcon = document.getElementById('theme-toggle-dark-icon');
    const lightIcon = document.getElementById('theme-toggle-light-icon');
    const mobileThemeText = document.getElementById('mobile-theme-text');

    if (darkIcon && lightIcon) {
      darkIcon.classList.toggle('hidden', isDark);
      lightIcon.classList.toggle('hidden', !isDark);
    }

    if (mobileThemeText) {
      mobileThemeText.textContent = isDark ? 'Switch to Light Mode' : 'Switch to Dark Mode';
    }
  }

  function toggleTheme() {
    const isDark = document.documentElement.classList.toggle('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    initTheme();
  }

  // Initialize theme on page load
  document.addEventListener('astro:page-load', () => {
    initTheme();

    const themeToggle = document.getElementById('theme-toggle');
    const mobileThemeToggle = document.getElementById('mobile-theme-toggle');
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    themeToggle?.addEventListener('click', toggleTheme);
    mobileThemeToggle?.addEventListener('click', toggleTheme);

    // Mobile menu toggle
    mobileMenuButton?.addEventListener('click', () => {
      mobileMenu?.classList.toggle('hidden');
    });

    // Close mobile menu when clicking a link
    const mobileLinks = document.querySelectorAll('#mobile-menu a');
    mobileLinks.forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu?.classList.add('hidden');
      });
    });
  });

  // Handle theme after view transitions
  document.addEventListener('astro:after-swap', initTheme);
</script>